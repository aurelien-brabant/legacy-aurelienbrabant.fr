{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nconst postsDir = path.join(process.cwd(), \"posts\");\n/*\n** Get the markdown posts, sorted in order.\n*/\n\nexport function getPosts() {\n  const fileNames = fs.readdirSync(postsDir);\n  const postsData = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(postsDir, fileName);\n    const fileContent = fs.readFileSync(fullPath, \"utf8\");\n    const matterRes = matter(fileContent);\n    console.log(matter);\n    return _objectSpread({\n      id\n    }, matterRes.data);\n  });\n  return postsData.sort((a, b) => {\n    if (a.date < b.date) return 1;else return -1;\n  });\n}","map":{"version":3,"sources":["/home/aurelien/WebstormProjects/aurelienbrabant.fr/lib/posts.js"],"names":["fs","path","matter","postsDir","join","process","cwd","getPosts","fileNames","readdirSync","postsData","map","fileName","id","replace","fullPath","fileContent","readFileSync","matterRes","console","log","data","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAjB;AAEA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,GAAoB;AAC1B,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,QAAf,CAAlB;AACA,QAAMO,SAAS,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC3C,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AAEA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,QAAV,EAAoBS,QAApB,CAAjB;AACA,UAAMI,WAAW,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAApB;AAEA,UAAMG,SAAS,GAAGhB,MAAM,CAACc,WAAD,CAAxB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AACA;AACCW,MAAAA;AADD,OAEIK,SAAS,CAACG,IAFd;AAIA,GAZiB,CAAlB;AAaA,SAAOX,SAAS,CAACY,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/B,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EACC,OAAO,CAAP,CADD,KAGC,OAAO,CAAC,CAAR;AACD,GALM,CAAP;AAMA","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\n\nconst postsDir = path.join(process.cwd(), \"posts\");\n\n/*\n** Get the markdown posts, sorted in order.\n*/\n\nexport function getPosts() {\n\tconst fileNames = fs.readdirSync(postsDir);\n\tconst postsData = fileNames.map(fileName => {\n\t\tconst id = fileName.replace(/\\.md$/, '');\n\n\t\tconst fullPath = path.join(postsDir, fileName);\n\t\tconst fileContent = fs.readFileSync(fullPath, \"utf8\");\n\n\t\tconst matterRes = matter(fileContent);\n\t\tconsole.log(matter);\n\t\treturn {\n\t\t\tid,\n\t\t\t...matterRes.data\n\t\t}\n\t});\n\treturn postsData.sort((a, b) => {\n\t\tif (a.date < b.date)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn -1;\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}